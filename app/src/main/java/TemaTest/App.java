/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
public class App {

    public App() {/* compiled code */}
    private static ArrayList<User> users = new ArrayList<>();
    private static ArrayList<Post> posts = new ArrayList<>();
    private static ArrayList<Comment> comments = new ArrayList<>();

    public static void main(java.lang.String[] args) {
        if (args != null) {
            String strings = args[0];
            if (strings.equals("-create-user")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 1 && "-u".equals(args[1].split(" ")[0])) {
                    int ok = 0;
                    String sir = args[1];

                    /* Gasește poziția primului spațiu */
                    int spaceIndex = sir.indexOf(' ');

                    String username = "";
                    /* Extrage textul de dupa primul spatiu */
                    if (spaceIndex != -1)
                        username = sir.substring(spaceIndex + 1);

                    /* Verificam daca exista deja utilizatorul */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username)) ok = 1;
                    }
                    if (ok == 1) {
                        System.out.println("{'status':'error','message':'User already exists'}");
                    } else {
                        if (ok == 0 && args.length > 2 && "-p".equals(args[2].split(" ")[0])) {
                            String sir2 = args[2];

                            /* Gasește poziția primului spatiu */
                            int spaceIndex2 = sir2.indexOf(' ');

                            String password = "";
                            /* Extrage textul de dupa primul spatiu */
                            if (spaceIndex2 != -1)
                                password = sir2.substring(spaceIndex2 + 1);
                            /* Cream un nou utilizator cu credentialele specificate si il adaugam in arraylist-ul de utilizatori */
                            User user1 = new User(username, password);
                            users.add(user1);
                            System.out.println("{ 'status' : 'ok', 'message' : 'User created successfully'}");
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'Please provide password'}");
                        }
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'Please provide username'}");
                }
            }
            if (strings.equals("-create-post")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    int ok = 0, index = 0;
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gaseste pozitia primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spatiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    /* Verificam veridicitatea datelor de autentificare */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                        if (args.length > 3 && "-text".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];

                            /* Gaseste pozitia primului spatiu */
                            int spaceIndex3 = sir3.indexOf(' ');

                            String text = "";
                            /* Extrage textul de dupa primul spatiu */
                            if (spaceIndex3 != -1)
                                text = sir3.substring(spaceIndex3 + 1);

                            /* Verificam daca textul este valid */
                            if (text.length() > 300) {
                                System.out.println("{ 'status' : 'error', 'message' : 'Post text length exceeded'}");
                            } else {
                                /* Adaugam postarea in arraylist-ul de postari si userului curent */
                                Post post = new Post(text, username);
                                posts.add(post);
                                users.get(index).addPost(post);
                                System.out.println("{ 'status' : 'ok', 'message' : 'Post added successfully'}");
                            }
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
                        }
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-delete-post-by-id")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    /* Verificam veridicitatea datelor de autentificare */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                        if (args.length > 3 && "-id".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];
                            int startIndex = sir3.indexOf("'") + 1;
                            /* Căutarea poziției sfârșitului numerelor */
                            int endIndex = sir3.indexOf("'", startIndex);
                            int id = 0;
                            if (startIndex != -1 && endIndex != -1) {
                                /* Extrage partea din șir care conține numărul */
                                String id_s = sir3.substring(startIndex, endIndex);

                                /* Convertirea șirului rezultat într-un număr întreg */
                                id = Integer.parseInt(id_s);
                            }
                            int del = 0;
                            /* Verificam daca exista postarea si ii apartine utilizatorului curent, iar daca exista se sterge */
                            for (int i = 0; i < users.get(index).posts.size(); i++) {
                                if (users.get(index).posts.get(i).getId() == id) {
                                    Post post = users.get(index).posts.get(i);
                                    users.get(index).removePost(post);
                                    posts.remove(post);
                                    del = 1;
                                    System.out.println("{ 'status' : 'ok', 'message' : 'Post deleted successfully'}");
                                    break;
                                }
                            }
                            if (del == 0) {
                                System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");
                            }
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'No identifier was provided'}");
                        }
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-follow-user-by-username")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spațiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    /* Verificam veridicitatea datelor de autentificare */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                        if (args.length > 3 && "-username".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];

                            /* Gasește poziția primului spațiu */
                            int spaceIndex3 = sir3.indexOf(' ');

                            String username_comp = "";
                            /* Extrage textul de dupa primul spațiu */
                            if (spaceIndex3 != -1)
                                username_comp = sir3.substring(spaceIndex3 + 1);

                            int user_ok = 1, index_user = 0, user_found = 0, found_ok = 0;
                            /* Verificam daca exista utilizatorul */
                            for (int i = 0; i < users.size(); i++) {
                                if (users.get(i).getUsername().equals(username_comp)) {
                                    user_found = i;
                                    found_ok = 1;
                                }
                            }

                            /* Verificam daca il urmarim deja */
                            for (int j = 0; j < users.get(index).following.size(); j++) {
                                if (users.get(index).following.get(j).getUsername().equals(users.get(user_found).getUsername())) {
                                    user_ok = 0;
                                }
                            }
                            /* Daca exista si nu il urmarim deja se adauga urmarirea */
                            if (user_ok == 1 && found_ok == 1) {
                                User follow_new = users.get(user_found);
                                users.get(index).addFollowing(follow_new);
                                users.get(user_found).addFollower(users.get(index));
                                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                            } else {
                                System.out.println("{ 'status' : 'error', 'message' : 'The username to follow was not valid'}");
                            }
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'No username to follow was provided'}");
                        }
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-unfollow-user-by-username")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spațiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    /* Verificam veridicitatea datelor de autentificare */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                        if (args.length > 3 && "-username".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];
                            /* Gasește poziția primului spațiu */
                            int spaceIndex3 = sir3.indexOf(' ');

                            String username_comp = "";
                            /* Extrage textul de dupa primul spațiu */
                            if (spaceIndex3 != -1)
                                username_comp = sir3.substring(spaceIndex3 + 1);
                            int user_ok = 0, index_user = 0, user_found = 0;
                            for (int i = 0; i < users.size(); i++) {
                                /* Verificam daca exista utilizatorul */
                                if (users.get(i).getUsername().equals(username_comp)) {
                                    user_found = i;
                                }
                                /* Verificam daca il urmarim deja */
                                if (user_found != 0) {
                                    for (int j = 0; j < users.get(index).following.size(); j++) {
                                        if (users.get(index).following.get(j).getUsername().equals(username_comp)) {
                                            user_ok = 1;
                                        }
                                        if (user_ok == 1)
                                            break;
                                    }
                                    break;
                                }
                            }

                            /* Daca exista si il urmarim deja se sterge urmarirea */
                            if (user_ok == 1) {
                                User follow_del = users.get(user_found);
                                users.get(index).removeFollowing(follow_del);
                                users.get(user_found).removeFollower(users.get(index));
                                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                            }
                            else {
                                System.out.println("{ 'status' : 'error', 'message' : 'The username to unfollow was not valid'}");
                            }
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'No username to unfollow was provided'}");
                        }
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-like-post")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spațiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    User user = new User();
                    /* Verificam daca exista utilizatorul */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                            user = users.get(i);
                        }
                    }
                    if (ok == 0) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else {
                        if (args.length > 3 && "-post-id".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];
                            int startIndex = sir3.indexOf("'") + 1;
                            /* Căutarea poziției sfârșitului numerelor */
                            int endIndex = sir3.indexOf("'", startIndex);
                            int id = 0;
                            if (startIndex != -1 && endIndex != -1) {
                                /* Extrage partea din șir care conține numărul */
                                String id_s = sir3.substring(startIndex, endIndex);

                                /* Convertirea șirului rezultat într-un număr întreg */
                                id = Integer.parseInt(id_s);
                            }
                            int found = 0;
                            Post post = new Post();
                            /* Verificam daca postarea exista */
                            for (int i = 0; i < users.size(); i++){
                                if (i != index) {
                                    for (int j = 0; j < users.get(i).posts.size(); j++)
                                        if (users.get(i).posts.get(j).getId() == id) {
                                            found = 1;
                                            post = users.get(i).posts.get(j);
                                        }
                                }
                            }
                            int liked_already = 1;
                            /* Verificam daca nu am mai apreciat deja */
                            for (int i = 0; i < users.get(index).likedPosts.size(); i++) {
                                if (users.get(index).likedPosts.get(i).getId() == id)
                                    liked_already = 0;
                            }

                            /* Daca exista si nu l-am apreciat deja se adauga aprecierea */
                            if (found == 1 && liked_already == 1) {
                                post.likePost(user);
                                users.get(index).addLikedPost(post);
                                for(int i = 0; i < posts.size(); i++)
                                    if (posts.get(i).getId() == id)
                                        posts.get(i).likePost(user);
                                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                            } else {
                                System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}");
                            }
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'No post identifier to like was provided'}");
                        }
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-unlike-post")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spațiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    User user = new User();
                    /* Verificam daca exista utilizatorul */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                            user = users.get(i);
                        }
                    }
                    if (ok == 0) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else {
                        if (args.length > 3 && "-post-id".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];
                            int startIndex = sir3.indexOf("'") + 1;
                            /* Căutarea poziției sfârșitului numerelor */
                            int endIndex = sir3.indexOf("'", startIndex);
                            int id = 0;
                            if (startIndex != -1 && endIndex != -1) {
                                /* Extrage partea din șir care conține numărul */
                                String id_s = sir3.substring(startIndex, endIndex);

                                /* Convertirea șirului rezultat într-un număr întreg */
                                id = Integer.parseInt(id_s);
                            }
                            int found = 0;
                            Post post = new Post();
                            /* Verificam daca exista postarea in platforma */
                            for (int i = 0; i < users.size(); i++){
                                if (i != index) {
                                    for (int j = 0; j < users.get(i).posts.size(); j++)
                                        if (users.get(i).posts.get(j).getId() == id) {
                                            found = 1;
                                            post = users.get(i).posts.get(j);
                                        }
                                }
                            }
                            int liked_already = 1;
                            /* Verificam daca nu am mai apreciat deja */
                            for (int i = 0; i < users.get(index).likedPosts.size(); i++) {
                                if (users.get(index).likedPosts.get(i).getId() == id)
                                    liked_already = 0;
                            }
                            /* Daca exista si l-am apreciat deja se sterge aprecierea */
                            if (found == 1 && liked_already == 0) {
                                post.unlikePost(user);
                                for(int i = 0; i < posts.size(); i++)
                                    if (posts.get(i).getId() == id)
                                        posts.get(i).unlikePost(user);
                                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                            } else {
                                System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to unlike was not valid'}");
                            }
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'No post identifier to unlike was provided'}");
                        }
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-like-comment")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spațiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    User user = new User();
                    /* Verificam daca exista utilizatorul */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                            user = users.get(i);
                        }
                    }
                    if (ok == 0) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else {
                        if (args.length > 3 && "-comment-id".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];
                            int startIndex = sir3.indexOf("'") + 1;
                            /* Căutarea poziției sfârșitului numerelor */
                            int endIndex = sir3.indexOf("'", startIndex);
                            int id = 0;
                            if (startIndex != -1 && endIndex != -1) {
                                /* Extrage partea din șir care conține numărul */
                                String id_s = sir3.substring(startIndex, endIndex);

                                /* Convertirea șirului rezultat într-un număr întreg */
                                id = Integer.parseInt(id_s);
                            }
                            int found = 0;
                            Comment comment = new Comment();
                            /* Verificam daca comentariul exista */
                            for (int i = 0; i < comments.size(); i++) {
                                if (comments.get(i).getId() == id) {
                                    found = 1;
                                    comment = comments.get(i);
                                }
                            }
                            int liked_already = 1;
                            /* Verificam daca nu l-am apreciat deja */
                            for (int i = 0; i < users.get(index).likedComments.size(); i++) {
                                if (users.get(index).likedComments.get(i).getId() == id)
                                    liked_already = 0;
                            }

                            /* Daca exista si nu l-am apreciat deja se adauga aprecierea */
                            if (found == 1 && liked_already == 1) {
                                comment.likeComment(user);
                                users.get(index).addLikedComment(comment);
                                for(int i = 0; i < comments.size(); i++)
                                    if (comments.get(i).getId() == id)
                                        comments.get(i).likeComment(user);
                                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                            } else {
                                System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}");
                            }
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'No comment identifier to like was provided'}");
                        }
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-unlike-comment")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spațiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    User user = new User();
                    /* Verificam daca exista utilizatorul */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                            user = users.get(i);
                        }
                    }
                    if (ok == 0) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else {
                        if (args.length > 3 && "-comment-id".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];
                            int startIndex = sir3.indexOf("'") + 1;
                            /* Căutarea poziției sfârșitului numerelor */
                            int endIndex = sir3.indexOf("'", startIndex);
                            int id = 0;
                            if (startIndex != -1 && endIndex != -1) {
                                /* Extrage partea din șir care conține numărul */
                                String id_s = sir3.substring(startIndex, endIndex);

                                /* Convertirea șirului rezultat într-un număr întreg */
                                id = Integer.parseInt(id_s);
                            }
                            int found = 0;
                            Comment comment = new Comment();
                            /* Verificam daca postarea exista */
                            for (int i = 0; i < comments.size(); i++) {
                                if (comments.get(i).getId() == id) {
                                    found = 1;
                                    comment = comments.get(i);
                                }
                            }
                            int liked_already = 0;
                            /* Verificam daca nu l-am apreciat deja */
                            for (int i = 0; i < users.get(index).likedComments.size(); i++) {
                                if (users.get(index).likedComments.get(i).getId() == id)
                                    liked_already = 1;
                            }

                            /* Daca exista si l-am apreciat deja se sterge aprecierea */
                            if (found == 1 && liked_already == 1) {
                                comment.unlikeComment(user);
                                for(int i = 0; i < comments.size(); i++)
                                    if (comments.get(i).getId() == id)
                                        comments.get(i).unlikeComment(user);
                                System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                            } else {
                                System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}");
                            }
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'No comment identifier to unlike was provided'}");
                        }
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-get-followings-posts")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                        System.out.print("{ 'status' : 'ok', 'message' : [");
                        int k = 0, p = 0;
                        Post post = new Post();
                        ArrayList<Post> postari = new ArrayList<Post>();
                        /* Se adauga postarile utilizatorilor pe care ii urmarim intr-un arraylist */
                        for (k = 0; k < users.get(index).following.size(); k++) {
                            for (p = 0; p < users.get(index).following.get(k).posts.size(); p++)
                                postari.add(users.get(index).following.get(k).posts.get(p));
                        }

                        /* Se sorteaza postarile dupa data si id si se afiseaza in ordinea specificata */
                        Collections.sort(postari, Comparator.comparing(Post::getPostDate).thenComparing(Post::getId).reversed());
                        for (p = 0; p < postari.size() - 1; p++) {
                            post = postari.get(p);
                            System.out.print("{'post_id':'" + post.getId() + "'");
                            System.out.print(",'post_text':" + post.getText());
                            System.out.print(",'post_date':'" + post.getPostDate() + "'");
                            System.out.print(",'username':" + post.getUsername());
                            System.out.print("},");
                        }
                        post = postari.get(p);
                        System.out.print("{'post_id':'" + post.getId() + "'");
                        System.out.print(",'post_text':" + post.getText());
                        System.out.print(",'post_date':'" + post.getPostDate() + "'");
                        System.out.print(",'username':" + post.getUsername());
                        System.out.print("}");
                        System.out.print("]}");
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-get-user-posts")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    /* Verificam veridicitatea datelor de autentificare */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                        if (args.length > 3 && "-username".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];
                            /* Gasește poziția primului spațiu */
                            int spaceIndex3 = sir3.indexOf(' ');

                            String username_comp = "";
                            /* Extrage textul de dupa primul spațiu */
                            if (spaceIndex3 != -1)
                                username_comp = sir3.substring(spaceIndex3 + 1);
                            int user_ok = 0, index_user = 0, user_found = 0;
                            /* Verificam daca utilizatorul exista */
                            for (int i = 0; i < users.size(); i++) {
                                if (users.get(i).getUsername().equals(username_comp)) {
                                    user_found = 1;
                                    index_user = i;
                                }
                            }
                            /* Verificam daca il urmarim */
                            for (int i = 0; i < users.get(index).following.size(); i++) {
                                if (users.get(index).following.get(i).getUsername().equals(username_comp)) {
                                    user_ok = 1;
                                }
                            }
                            /* Daca il urmarim si exista se afiseaza postarile */
                            if (user_ok == 1 && user_found == 1) {
                                System.out.print("{ 'status' : 'ok', 'message' : [");
                                int i = 0;
                                for (i = users.get(index_user).posts.size()-1; i > 0; i--) {
                                    System.out.print("{'post_id':'"+users.get(index_user).posts.get(i).getId()+"'");
                                    System.out.print(",'post_text':"+users.get(index_user).posts.get(i).getText());
                                    System.out.print(",'post_date':'"+users.get(index_user).posts.get(i).getPostDate()+"'");
                                    System.out.print("},");
                                }
                                System.out.print("{'post_id':'"+users.get(index_user).posts.get(i).getId()+"'");
                                System.out.print(",'post_text':"+users.get(index_user).posts.get(i).getText());
                                System.out.print(",'post_date':'"+users.get(index_user).posts.get(i).getPostDate()+"'");
                                System.out.print("}]}");
                            } else {
                                System.out.println("{ 'status' : 'error', 'message' : 'The username to list posts was not valid'}");
                            }
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'No username to list posts was provided'}");
                        }
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-get-post-details")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    /* Verificam veridicitatea datelor de autentificare */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                        if (args.length > 3 && "-post-id".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];
                            int startIndex = sir3.indexOf("'") + 1;
                            /* Căutarea poziției sfârșitului numerelor */
                            int endIndex = sir3.indexOf("'", startIndex);
                            int id = 0;
                            if (startIndex != -1 && endIndex != -1) {
                                /* Extrage partea din șir care conține numărul */
                                String id_s = sir3.substring(startIndex, endIndex);

                                /* Convertirea șirului rezultat într-un număr întreg */
                                id = Integer.parseInt(id_s);
                            }
                            int ok_user = 0, indexid = 0, follow = 0;
                            Post post = new Post();
                            /* Verificam daca postarea exista si este realizata de un utilizator pe care il urmarim */
                            for (int j = 0; j < users.get(index).following.size(); j++) {
                                System.out.println(users.get(index).following.get(j).getUsername());
                                System.out.println(users.get(index).following.get(j).posts.size());
                                for (int k = 0; k < users.get(index).following.get(j).posts.size(); k++) {
                                    System.out.println(users.get(index).following.get(j).posts.get(k).getId());
                                    if (users.get(index).following.get(j).posts.get(k).getId() == id) {
                                        follow = j;
                                        ok_user = 1;
                                        indexid = k;
                                        post = users.get(index).following.get(j).posts.get(k);
                                    }
                                }
                            }
                            /* Verificam daca postarea exista si este realizata de utilizatorul curent */
                            for (int j = 0; j < users.get(index).posts.size(); j++) {
                                if (users.get(index).posts.get(j).getId() == id) {
                                    ok_user = 1;
                                    indexid = j;
                                    post = users.get(index).posts.get(j);
                                }
                            }
                            /* Daca unul dintre cazurile de mai sus e valid se afiseaza postarea si informatiile sale */
                            if (ok_user == 1) {
                                System.out.print("{'status' : 'ok', 'message' : [{'post_text' : ");
                                System.out.print(post.getText());
                                System.out.print(", 'post_date' :'");
                                System.out.print(post.getPostDate());
                                System.out.print("', 'username' : "+ post.getUsername());
                                System.out.print(", 'number_of_likes' : '"+ post.likes.size()+"'");
                                if (post.comments.size() != 0) {
                                    System.out.print(", 'comments' : [{");
                                    for (int p = 0; p < post.comments.size(); p++) {
                                        System.out.print("'comment_id' : '" + post.comments.get(p).getId()+"'");
                                        System.out.print(", 'comment_text' : " + post.comments.get(p).getText());
                                        System.out.print(", 'comment_date' : '" + post.comments.get(p).getCommentDate());
                                        System.out.print("', 'username' : " + post.comments.get(p).getUsername());
                                        System.out.print(", 'number_of_likes' : '" + post.comments.get(p).likes.size()+"'");
                                    }
                                }
                                System.out.println("}] }] }");
                            } else {
                                System.out.println("{ 'status' : 'error', 'message' : 'The post identifier was not valid'}");
                            }
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'No post identifier was provided'}");
                        }
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-comment-post")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    int ok = 0, index = 0;
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gaseste pozitia primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spatiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    /* Verificam veridicitatea datelor de autentificare */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }

                    if (ok == 0) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else {
                        if (args.length > 4 && "-text".equals(args[4].split(" ")[0])) {
                            String sir3 = args[3];
                            int startIndex = sir3.indexOf("'") + 1;
                            /* Căutarea poziției sfârșitului numerelor */
                            int endIndex = sir3.indexOf("'", startIndex);
                            int id = 0;
                            if (startIndex != -1 && endIndex != -1) {
                                /* Extrage partea din șir care conține numărul */
                                String id_s = sir3.substring(startIndex, endIndex);

                                /* Convertirea șirului rezultat într-un număr întreg */
                                id = Integer.parseInt(id_s);
                            }

                            String sir4 = args[4];

                            /* Gaseste pozitia primului spatiu */
                            int spaceIndex4 = sir4.indexOf(' ');

                            String text = "";
                            /* Extrage textul de dupa primul spatiu */
                            if (spaceIndex4 != -1)
                                text = sir4.substring(spaceIndex4 + 1);

                            /* Verificam daca textul este valid */
                            if (text.length() > 300) {
                                System.out.println("{ 'status' : 'error', 'message' : 'Comment text length exceeded'}");
                            } else {
                                int user_index = 0;
                                /* Cautam userul care a postat */
                                for (int i = 0; i < users.size(); i++) {
                                    for (int j = 0; j < users.get(i).posts.size(); j++) {
                                        if (users.get(i).posts.get(j).getId() == id) {
                                            user_index = i;
                                        }
                                    }
                                }
                                /* Adaugam comentariul */
                                for (int i = 0; i < users.get(user_index).posts.size(); i++) {
                                    if (users.get(user_index).posts.get(i).getId() == id) {
                                        Comment comment = new Comment(username, text);
                                        users.get(user_index).posts.get(i).comments.add(comment);
                                        comments.add(comment);
                                    }
                                }
                                System.out.println("{ 'status' : 'ok', 'message' : 'Comment added successfully'}");
                            }
                        } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
                        }
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-delete-comment-by-id")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    int ok = 0, index = 0;
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gaseste pozitia primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spatiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    /* Verificam veridicitatea datelor de autentificare */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }

                    if (ok == 0) {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    } else {
                        if (args.length > 3 && "-id".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];
                            int startIndex = sir3.indexOf("'") + 1;
                            /* Căutarea poziției sfârșitului numerelor */
                            int endIndex = sir3.indexOf("'", startIndex);
                            int id = 0;
                            if (startIndex != -1 && endIndex != -1) {
                                /* Extrage partea din șir care conține numărul */
                                String id_s = sir3.substring(startIndex, endIndex);

                                /* Convertirea șirului rezultat într-un număr întreg */
                                id = Integer.parseInt(id_s);
                            }
                            int del = 0;
                            /* Verificam daca comentariul exista si ii gasim userul care l-a postat, dupa il stergem */
                            for (int i = 0; i < comments.size(); i++) {
                                if (comments.get(i).getId() == id) {
                                    String username_com = comments.get(i).getUsername();
                                    if (username_com.equals(username)) {
                                        del = 1;
                                        for (int j = 0; j < users.size(); j++) {
                                            if (users.get(j).getUsername().equals(username_com)) {
                                                for (int k = 0; k < users.get(j).posts.size(); k++) {
                                                    for (int l = 0; l < users.get(index).posts.get(i).comments.size(); l++) {
                                                        if (users.get(index).posts.get(k).comments.get(l).getId() == id) {
                                                        users.get(j).posts.get(k).comments.remove(users.get(j).posts.get(k).comments.get(l));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        comments.remove(comments.get(i));
                                        System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                                        break;
                                    }
                                }
                            }
                            if (del == 0) {
                                System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");
                            }
                        } else {
                            System.out.println("{'status':'error','message':'No identifier was provided'}");
                        }
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-get-following")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    /* Se verifica veridicitatea usersului si a parolei */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                            /* Se afiseaza toti userii pe care ii urmareste userul curent */
                            System.out.print("{ 'status' : 'ok', 'message' : [");
                            int k = 0;
                            for (k = 0; k < users.get(index).following.size()-1; k++) {
                                System.out.print(" "+users.get(index).following.get(k).getUsername()+",");
                            }
                            System.out.println(" "+users.get(index).following.get(k).getUsername()+" ]}");
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-get-followers")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    /* Se verifica veridicitatea usersului si a parolei */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                        if (args.length > 3 && "-username".equals(args[3].split(" ")[0])) {
                            String sir3 = args[3];

                            /* Gasește poziția primului spațiu */
                            int spaceIndex3 = sir3.indexOf(' ');

                            String username2 = "";
                            /* Extrage textul de dupa primul spațiu */
                            if (spaceIndex3 != -1)
                                username2 = sir3.substring(spaceIndex3 + 1);
                            int ok_user = 0;
                            int index2 = 0;
                            /* Se verifica veridicitatea celui de-al doilea user */
                            for (int j = 0; j < users.size(); j++) {
                                if (users.get(j).getUsername().equals(username2)) {
                                    ok_user = 1;
                                    index2 = j;
                                }
                            }
                            if (ok_user == 1) {
                                /* Se afiseaza toti followerii celui de-al doilea user */
                                System.out.print("{ 'status' : 'ok', 'message' : [");
                                int k = 0;
                                for (k = 0; k < users.get(index2).followers.size() - 1; k++) {
                                    System.out.print(" " + users.get(index2).followers.get(k).getUsername() + ",");
                                }
                                System.out.print(" " + users.get(index2).followers.get(k).getUsername());
                                System.out.println("]}");
                            } else {
                                System.out.println("{ 'status' : 'error', 'message' : 'The username to list followers was not valid'}");
                            }
                        } else {
                            System.out.println("{ 'status' : 'error', 'message' : 'No username to list followers was provided'}");
                        }
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-get-most-liked-posts")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    /* Se verifica veridicitatea usersului si a parolei */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                        int current = 0, max = 0, k = 0, p = 0;
                        ArrayList<Post> postari = new ArrayList<Post>();
                        /* Se adauga toate postarile intr-un arraylist */
                        for (k = 0; k < users.size(); k++) {
                            for (p = 0; p < users.get(k).posts.size(); p++) {
                                postari.add(users.get(k).posts.get(p));
                                System.out.println(users.get(k).posts.get(p).getId());
                            }
                        }

                        /* Se sorteaza lista de postari dupa numarul de like-uri si se afiseaza primii 5 */
                        Collections.sort(postari, Comparator.comparingInt(Post::getLikesSize).reversed());
                        System.out.print("{ 'status' : 'ok', 'message' : [");
                        int i = 0;
                        for (i = 0; i < postari.size() - 1 && i < 4; i++) {
                            System.out.print("{'post_id' : '" + postari.get(i).getId() + "'");
                            System.out.print(",'post_text' : " + postari.get(i).getText());
                            System.out.print(",'post_date' : '" + postari.get(i).getPostDate() + "'");
                            System.out.print(",'username' : " + postari.get(i).getUsername());
                            System.out.print(",'number_of_likes' : '" + postari.get(i).likes.size() + "'},");

                        }
                        System.out.print("{'post_id' : '" + postari.get(i).getId() + "'");
                        System.out.print(",'post_text' : " + postari.get(i).getText());
                        System.out.print(",'post_date' : '" + postari.get(i).getPostDate() + "'");
                        System.out.print(",'username' : " + postari.get(i).getUsername());
                        System.out.print(",'number_of_likes' : '" + postari.get(i).likes.size() + "'} ]}");
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-get-most-commented-posts")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    /* Se verifica veridicitatea usersului si a parolei */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                            /* Se sorteaza lista de postari dupa numarul de comentarii si se afiseaza primii 5 */
                            Collections.sort(posts, Comparator.comparingInt(Post::getCommentsSize).reversed());
                            System.out.print("{ 'status' : 'ok', 'message' : [");
                            int i = 0;
                            for (i = 0; i < 4; i++) {
                                if (i >= comments.size() - 1) break;
                                System.out.print("{'post_id' : '" + posts.get(i).getId() + "'");
                                System.out.print(",'post_text' : " + posts.get(i).getText());
                                System.out.print(",'post_date' : '" + posts.get(i).getPostDate() + "'");
                                System.out.print(",'username' : " + posts.get(i).getUsername());
                                System.out.print(",'number_of_comments' : '" + posts.get(i).comments.size() + "'},");
                            }
                            System.out.print("{'post_id' : '" + posts.get(i).getId() + "'");
                            System.out.print(",'post_text' : " + posts.get(i).getText());
                            System.out.print(",'post_date' : '" + posts.get(i).getPostDate() + "'");
                            System.out.print(",'username' : " + posts.get(i).getUsername());
                            System.out.print(",'number_of_comments' : '" + posts.get(i).comments.size() + "'}]}");
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-get-most-followed-users")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    /* Se verifica veridicitatea usersului si a parolei */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                        /* Se sorteaza lista de usersi dupa numarul de followersi si se afiseaza primii 5 */
                        Collections.sort(users, Comparator.comparingInt(User::getFollowersSize).reversed());
                        System.out.print("{ 'status' : 'ok', 'message' : [");
                        int i = 0;
                        for (i = 0; i < 4; i++) {
                            System.out.print("{'username' : "+users.get(i).getUsername());
                            System.out.print(", 'number_of_followers' : '"+users.get(i).getFollowersSize()+"'},");
                        }
                        System.out.print("{'username' : "+users.get(i).getUsername());
                        System.out.print(", 'number_of_followers' : '"+users.get(i).getFollowersSize()+"'} ]}");
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-get-most-liked-users")) {
                /* Se preiau argumentele din linia de comanda si se testeaza daca sunt valide */
                if (args.length > 2 && "-u".equals(args[1].split(" ")[0]) && "-p".equals(args[2].split(" ")[0])) {
                    String sir1 = args[1];
                    String sir2 = args[2];

                    /* Gasește poziția primului spatiu */
                    int spaceIndex1 = sir1.indexOf(' ');
                    int spaceIndex2 = sir2.indexOf(' ');

                    String username = "";
                    String password = "";
                    /* Extrage textul de dupa primul spațiu */
                    if (spaceIndex1 != -1)
                        username = sir1.substring(spaceIndex1 + 1);
                    if (spaceIndex2 != -1)
                        password = sir2.substring(spaceIndex2 + 1);
                    int ok = 0, index = 0;
                    /* Se verifica veridicitatea usersului si a parolei */
                    for (int i = 0; i < users.size(); i++) {
                        if (users.get(i).getUsername().equals(username) && users.get(i).getPassword().equals(password)) {
                            ok = 1;
                            index = i;
                        }
                    }
                    if (ok == 1) {
                        /* Se sorteaza lista de usersi dupa numarul de likeuri si se afiseaza primii 5 */
                        Collections.sort(users);
                        System.out.print("{ 'status' : 'ok', 'message' : [");
                        int i = 0;
                        for (i = 0; i < 4; i++) {
                            System.out.print("{'username' : "+users.get(i).getUsername());
                            System.out.print(", 'number_of_likes' : '"+users.get(i).likedPosts.size()+"'},");
                        }
                        System.out.print("{'username' : "+users.get(i).getUsername());
                        System.out.print(", 'number_of_likes' : '"+users.get(i).likedPosts.size()+"'} ]}");
                    } else {
                        System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                    }
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'You need to be authenticated'}");
                }
            }
            if (strings.equals("-cleanup-all")) {
                /*Functia parcurge toate listele si le goleste, resetand countul pentru id post si id comment*/
                for (int i = 0; i < users.size(); i++) {
                    for (int j = 0; j < users.get(i).posts.size(); j++) {
                        for (int k = 0; k < users.get(i).posts.get(j).comments.size(); k++) {
                            users.get(i).posts.get(j).comments.get(k).likes.clear();
                            users.get(i).posts.get(j).comments.get(k).resetCommentCounter();
                        }
                        users.get(i).posts.get(j).comments.clear();
                        users.get(i).posts.get(j).likes.clear();
                        users.get(i).posts.get(j).resetPostCounter();
                    }
                    users.get(i).posts.clear();
                    users.get(i).following.clear();
                    users.get(i).followers.clear();
                    users.get(i).likedComments.clear();
                    users.get(i).likedPosts.clear();
                }
                users.clear();
                for (int i = 0; i < comments.size(); i++) {
                    comments.get(i).likes.clear();
                }
                for (int i = 0; i < posts.size(); i++) {
                    posts.get(i).likes.clear();
                    posts.get(i).comments.clear();

                }
                comments.clear();
                posts.clear();
                System.out.println("{ 'status' : 'ok', 'message' : 'Cleanup finished successfully'}");
            }

        } else {
            System.out.println("Hello world!");
        }
    }
}
