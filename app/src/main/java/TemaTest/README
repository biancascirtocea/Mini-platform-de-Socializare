Pentru realizarea temei am realizat trei clase si anume clasa `Post`, clasa `Comment` si clasa `User`.Clasa `User` contine credentialele utilizatorului, niste liste de tip user pentru urmaritorii sai si pentru a stii pe cine urmareste el la randul sau. De asemenea, contine doua arraylisturi de tip postari, pentru postarile sale si pentru postarile la care a dat like. Plus, aceasta clasa mai prezinta si un arraylist pentru commentariile scrise de el.

Toate clasele contin getterele si setterele necesare si implementeaza interfata Comparable, suprascriind functia compareTo. Numai clasele Post si Comment implementeaza interfata Likeable si ii suprascriu functiile, deoarece userilor nu li se dau like, numai postarilor si comentariilor acestora. Clasa User prezinta functii pentru adaugarea unui urmaritor, pentru a sterge un urmaritor, pentru a adauga o postare, pentru a sterge o postare, pentru a adauga un comentariu, pentru a sterge un comentariu, pentru a da like la o postare, pentru a sterge like-ul de la o postare, pentru a da like la un comentariu si pentru a sterge like-ul de la un comentariu. Functiile Post si Comment prezinta functii asemanatoare, pentru a adauga un comentariu, pentru a sterge un comentariu, pentru a da like la un comentariu si pentru a sterge like-ul de la un comentariu. Toate cele trei clase prezinta functia resetCounter,  (posibil sub o alta denumire) care reseteaza numarul de obiecte create, pentru a putea fi folosita in main atunci cand se da comanda clear, iar toate obiectele create anterior se sterg si se ia de la zero platforma.

Programul prezinta trei arraylisturi pentru a stoca utilizatorii, postarile si comentariile. In main, se verifica prima oara argumentele date in linia de comanda. Daca in terminal nu este oferita nicio comanda, atunci se afiaseaza mesajul 'Hello world!'. In functie de fiecare caz explicat in tema in terminal pot fi oferiti mai multi parametrii, astfel, fiecare if trece printr-o serie de teste pentru a verifica pe rand argumentele din linia de comanda. Tinem cont, de faptul ca in terminal argumentele sunt date intre ghilimele, astfel, trebuie sa parcurgem unele argumente in parte pentru a delimita tipul de argument de informatia data din terminal. Spre exemplu pentru '-u username', trebuie sa delimitam -d de username si sa uti;izam mai departe in programul nostru username-ul aflat din terminal. In fiecare caz, daca nu se respecta toate conditiile se vor afisa diverse mesaje de eroare.

Parcurgerea stringului din terminal se realizeaza fie prin realizarea unui substring din momentul in care se intalneste un spatiu in argumentul dat, fie prin realizarea unui subsir stiind pozitia celor doua ', care incadreaza informatia dorita. In cazul in care este un numar, acest subsir se va transforma in int si se va stoca corespunzator.

Pentru a crea un utilizator verificam mai intai daca usernameul dat de la terminal exista deja in platforma, parcurgand arraylistul de useri. Iar daca nu il cream atribuindu-i o parola si apoi il adaugam in arraylistul de useri.
Pentru a crea o postare verificam mai intai daca userul care doreste sa creeze postarea exista in platforma, iar daca da, atunci cream postarea si o adaugam in arraylistul de postari al userului si in arraylistul de postari al platformei.
De fiecare data verificam daca ne putem conecta la platforma, prin verificarea credentialelor date din terminal, prin verificarea userului in arraylistul de users.
Pentru a sterge o postare in functie de id verificam daca exista aceasta postare deja in platforma si daca userul are drepturi de stergere, adica daca se afla printre postarile lui. Daca da, atunci eliminam postarea de la userul curent si din arraylistul de postari.
Pentru a urmari un user, trebuie sa verificam daca userul de urmarit exista (parcurgem arraylistul de user si cand il gasim tinem minte indexul userului din users), dupa daca il urmarim deja (parcurgem arraylistul de following al userului curent). Daca ambele variante sunt adevarate, atunci se adauga acest user la following, iar userului din following ii adaugam in followers userul curent.
Pentru a nu mai urmari un user, verificam daca exista si daca il urmarim deja, si apoi il eliminam din lista de following si ii modificam fostului user din following lista de followers.
Pentru a da like unei postari, cautam postarea si verificam daca i-am dat deja like (in arraylistul userului de likedPost), iar daca conditiile sunt indeplinite adaugam postarii like de la user si userului ii salvam comanda de like.
Pentru a da unlike unei postari, facem asemanator ca mai inainte, numai ca trebui ca de data asta postarea sa aiba deja like de la userul curent. Iar, daca da ii eliminam postarea userului din arraylisturi de likeuri, si eliminam likeul postarii datd e user.
Pentru a da like si unlike la un comment procesul este asemanator ca la postari, numai ca modificarile se realizeaza in arraylisturile pentru comentarii.
Pentru a afisa follwingsurile unui utilizator ii parcurgem arraylistul de following si afisam.
Pentru a afisa postarile unui user, verificam daca acesta exista si daca il urmarim apoi sa afisam informatiile.
Pentru a afisa datele unei postari ale unui user, trebuie sa verificam daca exista postarea si daca urmarim userul parinte al postarii dupa ii afisam datele.
Pentru a comenta sau a sterge comantariul unei postari, verificam daca textul este < 300c si daca se afla sau nu deja in cooments.
Pentru a afisa following sau followers afisam arraylistul specific al userului dat.
Pentru a afisa primele cinci postari cu cele mai multe likeuri sau commentarii, realizam o sortare, utilizand interfata comparable, in functie de nr de likuri/comentarii.
Se procedeaza la fel pentru cei mai urmariti user, numai ca schimbam sortarea dupa sizeul lui followers.
De asemenea, pentru userii cu cele mai multe likeuri se procedeaza la fel.
In toate cazurile, daca nu se indeplineste o conditie, se va afisa mesaj de eroare specific.
Functia de clean-up parcurge toate listele si le goleste si reseteaza counturile pentru id ale postarilor si comentariilor.